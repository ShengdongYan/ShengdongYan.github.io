{"pages":[{"title":"关于","date":"2019-04-07T18:35:53.547Z","updated":"2019-04-07T18:35:53.547Z","comments":false,"path":"about/index.html","permalink":"http://dongdongyan.com/about/index.html","excerpt":"","text":"关于我："},{"title":"分类","date":"2019-04-07T17:46:04.823Z","updated":"2019-04-07T17:46:04.823Z","comments":false,"path":"categories/index.html","permalink":"http://dongdongyan.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-04-07T17:46:50.558Z","updated":"2019-04-07T17:46:50.558Z","comments":true,"path":"links/index.html","permalink":"http://dongdongyan.com/links/index.html","excerpt":"","text":""},{"title":"项目仓库","date":"2019-04-07T17:40:25.454Z","updated":"2019-04-07T17:40:25.454Z","comments":false,"path":"repository/index.html","permalink":"http://dongdongyan.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-04-07T17:45:34.065Z","updated":"2019-04-07T17:45:34.065Z","comments":false,"path":"tags/index.html","permalink":"http://dongdongyan.com/tags/index.html","excerpt":"","text":""},{"title":"我的相册","date":"2019-04-07T18:12:21.470Z","updated":"2019-04-07T18:12:21.470Z","comments":true,"path":"photo/index.html","permalink":"http://dongdongyan.com/photo/index.html","excerpt":"","text":"待开发。。。。。。"}],"posts":[{"title":"Java基础知识（持续更新）","slug":"Java基础知识（持续更新）","date":"2019-04-08T15:20:31.000Z","updated":"2019-04-09T20:32:50.718Z","comments":true,"path":"2019/04/08/Java基础知识（持续更新）/","link":"","permalink":"http://dongdongyan.com/2019/04/08/Java基础知识（持续更新）/","excerpt":"","text":"最近在读Java圣经-Java编程思想（Thingking in Java 第四版）， 正好以笔记的形式整理一份Java的基础知识。Java-OOP编程的基础思想万物皆对象，我们应该想办法构造对象，然后对于这些对象以单位进行操作。（当然，对象都来自于不同的类，或者说类型）。每个对象应该尽可能的简单，只针对特定的功能，或者只针对特定的一个问题而创造，而不是想把所有问题都用一个类来解决。关键字 访问权限（access specifier） public,private,protected,defaultpublic：具有最大的访问权限，可以访问任何一个在classpath下的类、接口、异常等。它往往用于 对外 的情况，也就是对象或类对外的一种接口的形式。protected：主要的作用就是用来保护 子类 的。它的含义在于子类可以用它修饰的成员，其他的不可以，它相当于传递给子类的一种继承的东西default：有时候也称为friendly，它是针对 本包访问 而设计的，任何处于本包下的类、接口、异常等，都可以相互访问，即使是父类没有用protected修饰的成员也可以。private：访问权限仅限于类的 内部，是一种封装的体现，例如，大多数成员变量都是修饰符为private的，它们不希望被其他任何外部的类访问。关键字 方法的继承模式- overload, override, overwrite.区分方法是否相同与访问权限和返回类型无关, 只看名字+输入参数：1234567public void add()&#123;&#125; private void add()&#123;&#125; //是同一个方法,不允许同时出现。---------------------------------------------public int add(int a , int b)&#123;&#125;public double add(int a, int b)&#123;&#125; // 不允许，名同和参数同。overlaod（重载）: 是一个全新的方法，只是于原方法的名字相同，输入参数的类型或者数量或返回类型都可能不同。于多态无关override覆盖（重写，复写）: 覆盖父类或者接口中的方法，方法名同，参数同，返回类型同，只有内容不同。 贡献了多态性overwrite: java里没有，相当于override.后期我会再专门整理一份OOP三大特征：继承，封装，和多态的博文。类和类的关系- is-a, is-like-a,has-a;is-a: 继承关系，子类的全部接口（方法）在父类里也有is-like-a: 继承关系，子类里新增了一些接口has-a: 一个类的对象成了另一个类的属性向上转型（upcast）和向下转型转型(downcast)：详细内容参考：Java向上转型和向下转型把子类对象直接赋给父类引用叫upcasting向上转型，向上转型不用强制转型。如Father father = new Son();把指向子类对象的父类引用赋给子类引用叫向下转型（downcasting），要强制转型,要向下转型，必须先向上转型为了安全可以用instanceof判断。如father就是一个指向子类对象的父类引用，把father赋给子类引用son 即Son son =（Son）father；其中father前面的（Son）必须添加，进行强制转换。upcasting 会丢失子类特有的方法(只能调用父类中存在的方法和属性),但是子类overriding 父类的方法，子类方法有效（同名不同内容的变量也一样道理），向上转型只能引用父类对象的属性，要引用子类对象的同名属性，则要写getter函数 ,不可以.属性如：1234567891011// 父类有一个方法 public void add(Father f)&#123; System.out.println(f.name);&#125; //这样只会返回Father类里的name,就算后来输入的是son. 所以应该如下：public String getName()&#123; return this.name;&#125;public void add(Father f)&#123; System.out.println(f.getName());&#125;向上转型的作用，当用大家都有的方法时，减少重复代码，父类为参数，调有时用子类作为参数，就是利用了向上转型。这样使代码变得简洁。体现了JAVA的抽象编程思想。（坏处就是如果向上转型后，如果还想调用子类独有的方法，还要向下强制转型，所以其实向下转型是一种向上转型的附属品）如：12345678public void add(Father f)&#123;&#125;//在调用时可以add(new Son());//或者Son s = new Son(); add(s); //节省了代码量,因为当有很多子类时，不用对所有的子类类型都写一个add（Son1 s），add(Son2 s)方法单根集成结构：所有OOP语言（除了C++外），所有的类都最终集成自单一的基类，Java是都来自Object类； 好处： 1.垃圾回收很容易（相比于C++的重要改进） 2. 方便确定变量类型，进而处理异常。7. Java 数据类型：Java中的变量分为基本类型和引用类型两种。基本类型的变量保存数值本身，而引用类型的变量保存的是引用值，即指向内存空间的地址。 八大基本类型包括：byte,char,int short,long,float,double,boolean; (大写的 String, Integer, Double等是其对应的包装类) 引用类型包括：类类型，接口类型和数组。 在声明基本数据类型时，计算机就分配了内存空间： *基本类型在声明其变量时就为它分配了空间*： 1231 int value; 2 3 value = 10;//正确，因为声明a时就分配了空间*而引用不同，在进行引用的声明时只给变量声明了引用空间，而不分配数据空间：123456789101112 Date date; //执行实例化，开辟数据空间存放Date对象，然后把空间的首地址传给today变量 date=new Date(); //如果注释掉上一步操作 //The local variable date may not have been initialized //也就是说对象的数据空间没有分配 date.getDate();//初始化过程如下：Date a,b; //在内存开辟两个引用空间, 现在不能a = new Date();//开辟存储Date对象的数据空间，并把该空间的首地址赋给a b = a; //将a存储空间中的地址写到b的存储空间中补充： 形参： 传入方法或者类的参数 如: void add(int a){}// int a 是形参 实参：实际操作针对的参数，如 int a = 10; add(a); // a 为实参 1）形参为基本类型时，对形参的处理不会影响实参。 2）形参为引用类型时，对形参的处理会影响实参。 3）String,Integer,Double等immutable类型的特殊处理，可以理解为值传递，形参操作不会影响实参对象。 泛型 GenericType（参数化类型）出现自JavaSE5 以后：详细内容：Java泛型典型例子ArryListlist = new ArrayList();String 就是参数化类型的应用所在。 在Java5之前，我们在这种集合类中都是默认存入的是Object类,存入时我们要向上转型到Object类，取出时我们还需要人为记住每一个位置的类型并强制向下转型，很麻烦（其实现在内部也是存入的Object，只是我们看不到）。好处：1 可读性，从字面上就可以判断集合中的内容类型；2 类型检查，避免插入非法类型。3 获取数据时不在需要强制类型转换。12补充： 遇到 &lt;E&gt; ,&lt;T&gt;,&lt;A&gt;,&lt;B&gt;,&lt;K,V&gt;等，是用到了java中的泛型。 一般使用&lt;T&gt;来声明类型持有者名称，自定义泛型类时，类持有者名称可以使用T(Type) 如果是容器的元素可以使用E(Element)，若键值匹配可以用K(Key)和V(Value)等， 若是&lt;?&gt;，则是默认是允许Object及其下的子类，也就是java的所有对象了。 所以说，如果是字母A,B,C,D...定义的，就是泛型，这里T只是名字上的意义而已,你也可以用A，B等等： T---type,E----Element K----key, V----value 如果是？定义的，就是普通的Object或者其子类 举例说明： Set&lt;T&gt; 表示 集合里 是 T类的实例 List&lt;E&gt; 表示 集合里是E类的实例 List&lt;?&gt; 表示 集合里的对象类型不确定，未指定List同 List&lt;?&gt; 是一样的。通配符 wildcard:类型通配符一般是使用 ? 代替具体的类型实参。注意了，此处是类型实参，而不是类型形参！且Box&lt;?&gt;在逻辑上是Box、Box…等所有Box&lt;具体类型实参&gt;的父类。由此，我们依然可以定义泛型方法，来完成此类需求。123456789101112131415161718 1 public class GenericTest &#123; 2 3 public static void main(String[] args) &#123; 4 5 Box&lt;String&gt; name = new Box&lt;String&gt;(&quot;corn&quot;); 6 Box&lt;Integer&gt; age = new Box&lt;Integer&gt;(712); 7 Box&lt;Number&gt; number = new Box&lt;Number&gt;(314); 8 9 getData(name);10 getData(age);11 getData(number);12 &#125;13 14 public static void getData(Box&lt;?&gt; data) &#123;15 System.out.println(&quot;data :&quot; + data.getData());16 &#125;17 18 &#125;有时候，我们还可能听到类型通配符上限和类型通配符下限。具体有是怎么样的呢？在上面的例子中，如果需要定义一个功能类似于getData()的方法，但对类型实参又有进一步的限制：只能是Number类及其子类。此时，需要用到类型通配符上限。1234567891011121314151617181920212223242526 1 public class GenericTest &#123; 2 3 public static void main(String[] args) &#123; 4 5 Box&lt;String&gt; name = new Box&lt;String&gt;(&quot;corn&quot;); 6 Box&lt;Integer&gt; age = new Box&lt;Integer&gt;(712); 7 Box&lt;Number&gt; number = new Box&lt;Number&gt;(314); 8 9 getData(name);10 getData(age);11 getData(number);12 13 //getUpperNumberData(name); // 114 getUpperNumberData(age); // 215 getUpperNumberData(number); // 316 &#125;17 18 public static void getData(Box&lt;?&gt; data) &#123;19 System.out.println(&quot;data :&quot; + data.getData());20 &#125;21 22 public static void getUpperNumberData(Box&lt;? extends Number&gt; data)&#123;23 System.out.println(&quot;data :&quot; + data.getData());24 &#125;25 26 &#125; 此时，显然，在代码//1处调用将出现错误提示，而//2 //3处调用正常。 类型通配符上限通过形如Box&lt;? extends Number&gt;形式定义，相对应的，类型通配符下限为Box&lt;? super Number&gt;形式，其含义与类型通配符上限正好相反，在此不作过多阐述了。 储存区（包括堆栈）+基本类型详细介绍：来自于 Java编程思想第四版22页，我的github库里有一个专门的电子书籍整理，可自行下载。补充； Sting 类型的大小是每位字符都用2字节（16bits）来表示；BigInteger可以支持任何大小的整数，BigDecimal可以支持任何精度的小数。当基础数据类型作为类的数据成员时（global variable时），会有一个默认值,如下:1、整数类型（byte、short、int）的基本类型变量的默认值为0。2、单精度浮点型（float）的基本类型变量的默认值为0.0f。3、双精度浮点型（double）的基本类型变量的默认值为0.0d。4、字符型（char）的基本类型变量的默认为 “/u0000”。（null）5、布尔性的基本类型变量的默认值为 false。6、引用类型的变量是默认值为 null。7、long - 0l;8、数组引用类型的变量的默认值为 null。除关键数组变量的实例后，如果没有没有显示的为每个元素赋值，Java 就会把该数组的所有元素初始化为其相应类型的默认值。在作为local variable时必须手动初始化赋值12. 关键字 static:&gt;[Java static](https://www.cnblogs.com/dolphin0520/p/3799052.html) 1. static变量也称作静态变量，静态变量和非静态变量的区别是：静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化，所有新的对象会共享，（一个地方改变，其他地方也会变）。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。static成员变量的初始化顺序按照定义的顺序进行初始化。static 不可以用来修饰局部变量（规定）。 2. “static方法就是没有this的方法。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。这实际上正是static方法的主要用途。” static方法一般称作静态方法，由于静态方法不依赖于任何对象就可以进行访问，因此对于静态方法来说，是没有this的，因为它不依附于任何对象，既然都没有对象，就谈不上this了。并且由于这个特性，在静态方法中不能访问类的非静态成员变量和非静态成员方法，因为非静态成员方法/变量都是必须依赖具体的对象才能够被调用。 3. 所以在使用时，如果对于整个类都比较通用的变量或者方法，即静态的东西，就可以加上static. java.lang类包是默认导入每个文件里的，所以我们用的基础类型都不用额外import了。代码执行顺序：1.找main()方法， 加载 main所在类的static变量以及方法 2. 执行main方法， 3. 如果main里new了一个类，先加载该类的父类（的static 变量和方法），然后加载自己的static变量和方法，接着为了执行他的构造器，发现有个父类4.初始化父类里的普通变量，运行加载父类的构造器，5.最后才初始化自己的变量， 最后执行new 新建对象。配合例子：static 面试题编码风格（命名风格）： 驼峰风格类名：每一个单词的首字母都大写其他部分小写：class AllTheColorsOfTheRaindow{//…}其他变量，包括方法名： 第一个单词首字母小写，其他的也是首字母大写void allTheColorsOfTheRaindow(){//….}16.17.18.19.20.21.22.23.24.25.","categories":[{"name":"Java","slug":"Java","permalink":"http://dongdongyan.com/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"http://dongdongyan.com/tags/Java基础/"}]},{"title":"机器语言的分类（高级，低级，动态，强类型，面向对象等等）","slug":"机器语言的分类","date":"2019-04-08T14:13:13.000Z","updated":"2019-04-08T23:07:01.722Z","comments":true,"path":"2019/04/08/机器语言的分类/","link":"","permalink":"http://dongdongyan.com/2019/04/08/机器语言的分类/","excerpt":"","text":"计算机语言的几种分类常见的几种分类高级语言和低级语言动态类型和静态类型强制类型和弱类型编译型，解释型，半编译半解释面向对象型和面向过程型1. 高级语言和低级语言常见的低级语言有：机器码、汇编语言(assembly language)高级语言常见如：c，c++，java，python，PHP，c#，Ruby，go，kotlin，swift。机器码：计算机能够直接识别的二级制编码，无论语言多高级都要转成二级制文件来让计算机识别运行。汇编：用助记符（Mnemonics）代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址，在不同的设备中有着不同的指令集下面是一个LMC的例子：(little man laguage)12345678910111213INPSTA AL OUTADD ASTA BSUB CBRP ELDA BBRA LE HLTA DATB DATC DAT 100高级语言：为省去编程时候的不必要的操作细节，节省代码量，可读性强，维护性强，更贴近人性化高级语言与低级语言的区别：高级语言大部分不能直接更硬件打交道，这使得相对来的程序运行速度降低，总之一句话来说那种语言更接近人性化的语言就更高级。2. 动态类型和静态类型动态性语言是指在程序运行期间才给变量指定数据的类型，（数据类型可以根据环境改变） 常见于Object-C、C#、JavaScript、PHP、Python、Erlang等，而静态类型语言则恰好相反，在写程序代码的时候就要指定变量的类型，这种语言有：c，c++，java3. 强制类型与弱类型我们可知C语言中，一个变量只能定义为一种类型，如float类型，那么它就只能是float类型而不能在不发生转化的情况下赋予int类型，这就是 强制类型 的具体体现。而python和js不是，python中的变量可以任意的复制，而没有类型的界限。这就是弱类型强制类型更严谨，更不容易出现错误，但弱类型的语言写起来更优雅，更舒畅4. 编译型，解释型，半编译半解释对于源程序，编译型语言在执行程序中会将源文件一次性的转化为机器码，而解释型语言是边编译边解释；编译型语言是离不开解释程序的，这也导致了解释性语言对于运行时候的速度比价慢，解释型语言只要有解释器，移植起来比较方便，而编译型语言则要对于不同的系统进行编译，是的工作繁琐，且在调试程序的时候比较慢编译型语言可见于c，c++等 一次编译到处执行解释型语言可见于python，JavaScript，Perl，shell等而java和c#是半编译半解释型的语言，java会将源文件在jVM中转化为字节码，即.class文件，在程序运行的时候转化为二进制文件。和C#中的.net有点区别，C#编译的成的.net目标代码（中间码），接近与二进制文件，可移植性没有java好，java是“一次编译，到处执行”，c#是“一次编码，到处编译”。5. 面向对象型和面向过程型面向过程是决定该怎么铺成一条路到达终点，而面向对象是要用那些具有特定功能的像来做，两者是不同的思想。c++是部部分面对对象的，java具有封装性是完全面对对象的，c语言是面对过程的语言","categories":[{"name":"计算机基础知识","slug":"计算机基础知识","permalink":"http://dongdongyan.com/categories/计算机基础知识/"}],"tags":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://dongdongyan.com/tags/计算机基础/"},{"name":"编程语言","slug":"编程语言","permalink":"http://dongdongyan.com/tags/编程语言/"}]},{"title":"写博客的Markdown语法介绍","slug":"写博客的Markdown语法介绍","date":"2019-04-07T20:19:15.000Z","updated":"2019-04-08T22:51:59.663Z","comments":true,"path":"2019/04/07/写博客的Markdown语法介绍/","link":"","permalink":"http://dongdongyan.com/2019/04/07/写博客的Markdown语法介绍/","excerpt":"","text":"md语法已经成了程序员的一项必备技能作为程序员，学会用markdown文本编辑代替传统的Office全家桶才够酷。重要的是，写一些博文，甚至在网上发表评论的时候，md语法几乎是必备的。现在大部分的论坛和网站都已经默认支持了md语法，包括github，简书,csdn,博客园等等。以.md结尾的文件就是用markdown语法的地方了，推荐用VScode进行编辑，可以在编辑的同时直接在右侧预览效果。如下：所以，总之作为程序员，如果不会基本的md语法那你就out啦！md语法已经有很多成熟的介绍文章了，所以我直接引用了一篇比较基础的，也方便以后我自己复习下面是引用内容：一、标题在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。示例：123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题效果：这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题二、字体加粗要加粗的文字左右分别用两个*号包起来斜体要倾斜的文字左右分别用一个*号包起来斜体加粗要倾斜和加粗的文字左右分别用三个*号包起来删除线要加删除线的文字左右分别用两个~~号包起来示例：1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~这是加粗的文字这是倾斜的文字`这是斜体加粗的文字这是加删除线的文字三、引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…貌似可以一直加下去，但没神马卵用示例：123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容效果如下：这是引用的内容这是引用的内容这是引用的内容四、分割线三个或者三个以上的 - 或者 * 都可以。示例：1234-------********效果如下：五、图片语法：1![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加示例：12![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)效果如下：上传本地图片直接点击导航栏的图片标志，选择图片即可六、超链接语法：1[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加示例：12[简书](http://jianshu.com)[百度](http://baidu.com)效果如下：简书百度注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。1&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;示例简书七、列表无序列表语法：1234无序列表用 - + * 任何一种都可以- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格效果如下：列表内容列表内容列表内容有序列表语法：数字加点123451. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格效果如下：列表内容列表内容列表内容列表嵌套上一级和下一级之间敲三个空格即可1234- 一级无序列表内容 - 二级无序列表内容 - 二级无序列表内容 - 二级无序列表内容效果一级无序列表内容二级无序列表内容二级无序列表内容二级无序列表内容1234- 一级无序列表内容 1. 二级无序列表内容 2. 二级无序列表内容 3. 二级无序列表内容效果一级无序列表内容二级无序列表内容二级无序列表内容二级无序列表内容123456781. 一级无序列表内容 1. 二级无序列表内容 2. 二级无序列表内容 3. 二级无序列表内容2. 一级无序列表内容 1. 二级无序列表内容 2. 二级无序列表内容 3. 二级无序列表内容效果一级无序列表内容二级无序列表内容二级无序列表内容二级无序列表内容一级无序列表内容二级无序列表内容二级无序列表内容二级无序列表内容八、表格语法：1234567891011表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略示例：12345姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟效果如下：姓名技能排行刘备哭大哥关羽打二哥张飞骂三弟九、代码语法：单行代码：代码之间分别用一个反引号包起来1`代码内容`代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行1234567(```) 代码... 代码... 代码...(```)注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。效果如下：create database hero;代码块1234function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;;&#125;fun();十、流程图123456789```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;`效果如下：有些地方可能不支持流程图，所以截了个图：十一、补充实现缩进两种方案手动输入空格 （&amp;nbsp；）。注意！此时的分号为英文分号，但是不推荐使用此方法，太麻烦！使用全角空格(切换快捷键shift+空格)。即：在全角输入状态下直接使用空格键就ok了实现换行两种方案两个回车即可使用&lt; br &gt;字体大小、颜色、类型、加粗、倾斜&lt; font size=5&gt; Hello&lt; font color=red&gt;color&lt; font face=“微软雅黑”&gt;微软雅黑内容 (*与内容之间没有空格)内容 (*与内容之间没有空格)参考来源作者：高鸿祥链接：https://www.jianshu.com/p/191d1e21f7ed来源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。再推荐一个比较全面的： markdown文档大全","categories":[{"name":"日常随笔","slug":"日常随笔","permalink":"http://dongdongyan.com/categories/日常随笔/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://dongdongyan.com/tags/Hexo/"},{"name":"建站","slug":"建站","permalink":"http://dongdongyan.com/tags/建站/"},{"name":"markdown","slug":"markdown","permalink":"http://dongdongyan.com/tags/markdown/"}]},{"title":"分类和标签功能测试","slug":"标签和分类测试","date":"2019-04-03T00:38:16.000Z","updated":"2019-04-07T21:52:48.768Z","comments":true,"path":"2019/04/03/标签和分类测试/","link":"","permalink":"http://dongdongyan.com/2019/04/03/标签和分类测试/","excerpt":"","text":"只是用于测试分类和标签功能md文件各属性填写如下：12345title: 分类和标签功能测试date: 2019-04-03 01:38:16categories: 日常随笔tags: [Java,Hexo,git]toc: true # 是否启用内容索引由于本主题的左侧tags 和 categories页面不自动生成，我从主题作者github库中的issues得知两个方法:移动 themes/source/tags和categories文件夹 到根目录的soucre下即可 （但是我自己这边不太好用）12hexo new page “tags” hexo new page “categories”经过亲测， 先移动文件夹再new page一定可以凑效。 其实也可以直接new page 然后修改文件头如上示例。","categories":[{"name":"日常随笔","slug":"日常随笔","permalink":"http://dongdongyan.com/categories/日常随笔/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://dongdongyan.com/tags/Hexo/"},{"name":"建站","slug":"建站","permalink":"http://dongdongyan.com/tags/建站/"},{"name":"Hexo主题","slug":"Hexo主题","permalink":"http://dongdongyan.com/tags/Hexo主题/"}]},{"title":"Blog Theme English document","slug":"README","date":"2019-04-02T19:23:37.000Z","updated":"2019-04-07T21:31:49.213Z","comments":true,"path":"2019/04/02/README/","link":"","permalink":"http://dongdongyan.com/2019/04/02/README/","excerpt":"","text":"pureA brand new default theme for [Hexo]. Preview | 中文说明文档 | iconfontFeaturesMultiple languages supportComment supportTags pageCategories pageSocial MediaSkinsAppearanceHome | Archives | Categories | Tags | Repository | Books | Links | AboutInstall themeExecute the following command under your hexo folder.1git clone https://github.com/cofess/hexo-theme-pure.git themes/pureThen modify the property theme of the file hexo/_config.yml to theme: pureUpdate themeExecute the following command to update theme.12cd themes/puregit pullInstall pluginhexo-wordcount1npm install hexo-wordcount --savehexo-generator-json-content1npm install hexo-generator-json-content --savehexo-generator-feed1npm install hexo-generator-feed --savehexo-generator-sitemap1npm install hexo-generator-sitemap --savehexo-generator-baidu-sitemap1npm install hexo-generator-baidu-sitemap --saveData filesSometimes you may need to use some data in templates which is not directly available in your posts, or you want to reuse the data elsewhere. For such use cases, Hexo 3 introduced the new Data files. This feature loads YAML or JSON files in source/_data folder so you can use them in your site.For example, add links.yml in source/_data folder.links dataadd links.yml in source/_data folder.The format of the link :1234Name: link: http://example.com avatar: http://example.com/avatar.png desc: descriptionAdd a number of links, we just need to repeat the format according to the above.Blog optimizationhexo-neatauto Minify html、js、css and make it neat1npm install hexo-neat --saveYou can configure this plugin in _config.yml.12345678910111213141516# hexo-neatneat_enable: trueneat_html: enable: true exclude: neat_css: enable: true exclude: - &apos;*.min.css&apos;neat_js: enable: true mangle: true output: compress: exclude: - &apos;*.min.js&apos;hexo-baidu-url-submit1npm install hexo-baidu-url-submit --savehexo-translate-titletranslate the chinese title of Hexo blog to english words automatially1npm install hexo-translate-title --saveYou can configure this plugin in _config.yml.123456translate_title: translate_way: google #google | baidu | youdao youdao_api_key: XXX youdao_keyfrom: XXX is_need_proxy: true #true | false proxy_url: http://localhost:8123Mathjax Supporthexo-renderer-markdown-it-plusinstall12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --saveYou can configure this plugin in _config.yml.12345678910111213141516markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ plugins: - plugin: name: markdown-it-katex enable: true - plugin: name: markdown-it-mark enable: falseArticle enable mathjax12title: Hello Worldmathjax: true","categories":[{"name":"日常随笔","slug":"日常随笔","permalink":"http://dongdongyan.com/categories/日常随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://dongdongyan.com/tags/随笔/"},{"name":"Hexo","slug":"Hexo","permalink":"http://dongdongyan.com/tags/Hexo/"},{"name":"建站","slug":"建站","permalink":"http://dongdongyan.com/tags/建站/"}]},{"title":"博客主题中文文档","slug":"README.cn","date":"2019-04-02T19:23:37.000Z","updated":"2019-04-07T21:31:51.491Z","comments":true,"path":"2019/04/02/README.cn/","link":"","permalink":"http://dongdongyan.com/2019/04/02/README.cn/","excerpt":"","text":"pureA brand new default theme for [Hexo]. Preview | English documentation | iconfont特色多语言第三方评论框（友言、来必力、gitment、gitalk）可展示个人豆瓣书单可展示个人github托管项目可设置支付宝、微信打赏主题颜色页面展示首页 | 归档 | 分类 | 标签 | 项目 | 书单 | 友链 | 关于配置说明在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件安装主题1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure更新主题12cd themes/puregit pull启用pure主题打开站点配置文件，找到theme字段，将其值更改为 pure1theme: pure到此，主题安装完成。然后启动Hexo服务验证主题是否正确启用。1hexo s安装插件hexo-wordcount1npm install hexo-wordcount --savehexo-generator-json-content1npm install hexo-generator-json-content --savehexo-generator-feed1npm install hexo-generator-feed --savehexo-generator-sitemap1npm install hexo-generator-sitemap --savehexo-generator-baidu-sitemap1npm install hexo-generator-baidu-sitemap --save主题配置设置语言打开站点配置文件, 将 language 设置成你所需要的语言。建议明确设置你所需要的语言,可选值对应themes\\pure\\languages目录下语言文件，简体中文配置如下：1language: zh-CN主题颜色定制了五套颜色，默认白，黑:theme-black，蓝:theme-blue，绿:theme-green，紫:theme-purple123# configconfig: skin: # 主题颜色 theme-black theme-blue theme-green theme-purple导航菜单12345678910111213141516171819202122# 导航菜单menu: Home: . Archives: archives # 归档 Categories: categories # 分类 Tags: tags # 标签 Repository: repository # github repositories Books: books # 书单 Links: links # 友链 About: about # 关于# 导航菜单图标（font awesome）menu_icons: enable: true # 是否启用菜单图标 home: icon-home-fill archives: icon-archives-fill categories: icon-folder tags: icon-tags repository: icon-project books: icon-book-fill links: icon-friendship about: icon-cup-fill设置个人信息123头像在themes\\pure\\source\\images 目录下替换图片即可，捐献的二维码同理。个人信息大部分都在 主题配置文件 中设置搜索主题内置三种站内搜索方式：insight、swiftype、baidu12345# Searchsearch: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search分享支持weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedin123456# Share# weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedinshare: enable: true # 是否启用分享 sites: weibo,qq,wechat,facebook,twitter # PC端显示的分享图标 mobile_sites: weibo,qq,qzone # 移动端显示的分享图标评论主题集成了disqus、友言、来必力、gitment、gitalk评论系统，选择其中一种即可12345678910111213141516# Comment# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/comment: type: livere # 启用哪种评论系统 disqus: # enter disqus shortname here youyan: uid: *** # enter youyan uid livere: uid: *** # enter livere uid gitment: githubID: username repo: username.github.io ClientID: *** ClientSecret: *** lazy: false文章浏览量统计主题内置了不蒜子和leancloud来统计文章浏览量，启用其中之一即可，注意leancloud需要到其官网申请APP ID 和APP Key。比如，启用不蒜子来统计文章浏览量，在主题配置文件中把busuanzi设置为true即可：123pv: busuanzi: enable: true # 不蒜子统计如果不需要第三方来统计浏览量，只需将相应设置改为false即可（设置为false后不会加载第三方JS脚本）Github respostory复制theme/pure/_source/ 目录下repository文件夹到blog path/source/ 目录下123# Githubgithub: username: *** # github username豆瓣书单复制theme/pure/_source/ 目录下books文件夹到blog path/source/ 目录下12345# douban 豆瓣书单douban: user: *** # 豆瓣用户名 start: 0 # 从哪一条记录开始 count: 100 # 获取豆瓣书单数据条数友情链接复制theme/pure/_source/ 目录下links文件夹到blog path/source/ 目录下在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。然后在文件内创建一个名为 links.yml 的文件,在其中添加相关数据即可。单个友情链接的格式为：1234Name: link: http://example.com avatar: http://example.com/avatar.png desc: &quot;这是一个描述&quot;添加多个友情链接，我们只需要根据上面的格式重复填写即可。. 将 Name 改为友情链接的名字，例如 Cofess。. http://example.com 为友情链接的地址。. http://example.com/avatar.png 为友情链接的头像。. 这是一个描述 为友情链接描述。文章索引目录123456title: 文章标题categories: - 文章分类tags: - 文章标签toc: true # 是否启用内容索引sidebar侧边栏文章侧边栏默认为开启状态，如果某篇文章不想开启侧边栏，在文章开头配置加入“sidebar: none”即可：123456title: 文章标题categories: - 文章分类tags: - 文章标签sidebar: none # 是否启用sidebar侧边栏，none：不启用博客优化hexo-neatauto Minify html、js、css and make it neat1npm install hexo-neat --save在博客配置文件_config.yml中添加12345678910111213141516# hexo-neatneat_enable: trueneat_html: enable: true exclude: neat_css: enable: true exclude: - &apos;*.min.css&apos;neat_js: enable: true mangle: true output: compress: exclude: - &apos;*.min.js&apos;hexo-baidu-url-submit1npm install hexo-baidu-url-submit --savehexo-translate-title使用Google翻译，百度翻译和有道翻译将Hexo中的汉字标题转成英文标题安装1npm install hexo-translate-title --save在博客配置文件_config.yml中添加123456translate_title: translate_way: google #google | baidu | youdao youdao_api_key: XXX youdao_keyfrom: XXX is_need_proxy: true #true | false proxy_url: http://localhost:8123注意：判断是否需要配置google本地代理，因为我在本地是开启时才能访问google翻译的，如果没有被墙，请将_config.yml 下的is_need_proxy: true改为false。如果设置为true,请设置本地代理地址数学公式Hexo默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签解决方案解决方案有很多，可以网上搜下，为了节省大家的时间，这里只提供亲身测试过的方法。更换Hexo的markdown渲染引擎，hexo-renderer-markdown-it-plus引擎替换默认的渲染引擎hexo-renderer-marked即可。安装hexo-renderer-markdown-it-plus插件12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --save配置安装插件后，如果未正常渲染LaTeX数学公式，在博客配置文件_config.yml中添加12345678910111213141516markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ plugins: - plugin: name: markdown-it-katex enable: true - plugin: name: markdown-it-mark enable: false文章启用mathjax12title: Hello Worldmathjax: true","categories":[{"name":"日常随笔","slug":"日常随笔","permalink":"http://dongdongyan.com/categories/日常随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://dongdongyan.com/tags/随笔/"},{"name":"Hexo","slug":"Hexo","permalink":"http://dongdongyan.com/tags/Hexo/"},{"name":"建站","slug":"建站","permalink":"http://dongdongyan.com/tags/建站/"}]},{"title":"Speed Test","slug":"Test","date":"2019-03-26T20:23:37.000Z","updated":"2019-04-07T21:31:47.165Z","comments":true,"path":"2019/03/26/Test/","link":"","permalink":"http://dongdongyan.com/2019/03/26/Test/","excerpt":"","text":"只是测试一下如果用Github托管，在国内浏览此博客的速度。包括手机端效果和WIN以及MAC的浏览器效果。","categories":[{"name":"日常随笔","slug":"日常随笔","permalink":"http://dongdongyan.com/categories/日常随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://dongdongyan.com/tags/随笔/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-03-26T20:20:00.404Z","updated":"2019-04-07T21:31:54.174Z","comments":true,"path":"2019/03/26/hello-world/","link":"","permalink":"http://dongdongyan.com/2019/03/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new \"My New Post\"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment","categories":[],"tags":[]}]}